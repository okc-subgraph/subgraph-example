// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DelegateEvent extends ethereum.Event {
  get params(): DelegateEvent__Params {
    return new DelegateEvent__Params(this);
  }
}

export class DelegateEvent__Params {
  _event: DelegateEvent;

  constructor(event: DelegateEvent) {
    this._event = event;
  }

  get _amountDelegated(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RequestWithdrawEvent extends ethereum.Event {
  get params(): RequestWithdrawEvent__Params {
    return new RequestWithdrawEvent__Params(this);
  }
}

export class RequestWithdrawEvent__Params {
  _event: RequestWithdrawEvent;

  constructor(event: RequestWithdrawEvent) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ResetDelagateCache extends ethereum.Event {
  get params(): ResetDelagateCache__Params {
    return new ResetDelagateCache__Params(this);
  }
}

export class ResetDelagateCache__Params {
  _event: ResetDelagateCache;

  constructor(event: ResetDelagateCache) {
    this._event = event;
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SubmitEvent extends ethereum.Event {
  get params(): SubmitEvent__Params {
    return new SubmitEvent__Params(this);
  }
}

export class SubmitEvent__Params {
  _event: SubmitEvent;

  constructor(event: SubmitEvent) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StOKT__convertOKTToStOKTResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class StOKT__convertStOKTToOKTResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class StOKT__getRateOfOKTPerStOKTResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class StOKT__getRateOfStOKTPerOKTResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class StOKT extends ethereum.SmartContract {
  static bind(address: Address): StOKT {
    return new StOKT("StOKT", address);
  }

  AGENT(): Bytes {
    let result = super.call("AGENT", "AGENT():(bytes32)", []);

    return result[0].toBytes();
  }

  try_AGENT(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("AGENT", "AGENT():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  INITRATE(): BigInt {
    let result = super.call("INITRATE", "INITRATE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_INITRATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("INITRATE", "INITRATE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  OKCLst(): Address {
    let result = super.call("OKCLst", "OKCLst():(address)", []);

    return result[0].toAddress();
  }

  try_OKCLst(): ethereum.CallResult<Address> {
    let result = super.tryCall("OKCLst", "OKCLst():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  agent(): Address {
    let result = super.call("agent", "agent():(address)", []);

    return result[0].toAddress();
  }

  try_agent(): ethereum.CallResult<Address> {
    let result = super.tryCall("agent", "agent():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertOKTToStOKT(_amount: BigInt): StOKT__convertOKTToStOKTResult {
    let result = super.call(
      "convertOKTToStOKT",
      "convertOKTToStOKT(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );

    return new StOKT__convertOKTToStOKTResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_convertOKTToStOKT(
    _amount: BigInt
  ): ethereum.CallResult<StOKT__convertOKTToStOKTResult> {
    let result = super.tryCall(
      "convertOKTToStOKT",
      "convertOKTToStOKT(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StOKT__convertOKTToStOKTResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  convertStOKTToOKT(_amount: BigInt): StOKT__convertStOKTToOKTResult {
    let result = super.call(
      "convertStOKTToOKT",
      "convertStOKTToOKT(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );

    return new StOKT__convertStOKTToOKTResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_convertStOKTToOKT(
    _amount: BigInt
  ): ethereum.CallResult<StOKT__convertStOKTToOKTResult> {
    let result = super.tryCall(
      "convertStOKTToOKT",
      "convertStOKTToOKT(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StOKT__convertStOKTToOKTResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  delegateCache(): BigInt {
    let result = super.call("delegateCache", "delegateCache():(uint256)", []);

    return result[0].toBigInt();
  }

  try_delegateCache(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "delegateCache",
      "delegateCache():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochUpdating(): boolean {
    let result = super.call("epochUpdating", "epochUpdating():(bool)", []);

    return result[0].toBoolean();
  }

  try_epochUpdating(): ethereum.CallResult<boolean> {
    let result = super.tryCall("epochUpdating", "epochUpdating():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getEpochAcrossOracle(): BigInt {
    let result = super.call(
      "getEpochAcrossOracle",
      "getEpochAcrossOracle():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getEpochAcrossOracle(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEpochAcrossOracle",
      "getEpochAcrossOracle():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastTotalUnstakeAmount(): BigInt {
    let result = super.call(
      "getLastTotalUnstakeAmount",
      "getLastTotalUnstakeAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLastTotalUnstakeAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastTotalUnstakeAmount",
      "getLastTotalUnstakeAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRateOfOKTPerStOKT(): StOKT__getRateOfOKTPerStOKTResult {
    let result = super.call(
      "getRateOfOKTPerStOKT",
      "getRateOfOKTPerStOKT():(uint256,uint256)",
      []
    );

    return new StOKT__getRateOfOKTPerStOKTResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getRateOfOKTPerStOKT(): ethereum.CallResult<
    StOKT__getRateOfOKTPerStOKTResult
  > {
    let result = super.tryCall(
      "getRateOfOKTPerStOKT",
      "getRateOfOKTPerStOKT():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StOKT__getRateOfOKTPerStOKTResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getRateOfStOKTPerOKT(): StOKT__getRateOfStOKTPerOKTResult {
    let result = super.call(
      "getRateOfStOKTPerOKT",
      "getRateOfStOKTPerOKT():(uint256,uint256)",
      []
    );

    return new StOKT__getRateOfStOKTPerOKTResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getRateOfStOKTPerOKT(): ethereum.CallResult<
    StOKT__getRateOfStOKTPerOKTResult
  > {
    let result = super.tryCall(
      "getRateOfStOKTPerOKT",
      "getRateOfStOKTPerOKT():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StOKT__getRateOfStOKTPerOKTResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTotalPooledOKT(): BigInt {
    let result = super.call(
      "getTotalPooledOKT",
      "getTotalPooledOKT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalPooledOKT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalPooledOKT",
      "getTotalPooledOKT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalStakeAcrossOracle(): BigInt {
    let result = super.call(
      "getTotalStakeAcrossOracle",
      "getTotalStakeAcrossOracle():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalStakeAcrossOracle(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalStakeAcrossOracle",
      "getTotalStakeAcrossOracle():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalUnstakeAmountByEpoch(epoch: BigInt): BigInt {
    let result = super.call(
      "getTotalUnstakeAmountByEpoch",
      "getTotalUnstakeAmountByEpoch(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );

    return result[0].toBigInt();
  }

  try_getTotalUnstakeAmountByEpoch(epoch: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalUnstakeAmountByEpoch",
      "getTotalUnstakeAmountByEpoch(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pauser(): Address {
    let result = super.call("pauser", "pauser():(address)", []);

    return result[0].toAddress();
  }

  try_pauser(): ethereum.CallResult<Address> {
    let result = super.tryCall("pauser", "pauser():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  requestWithdraw(_amount: BigInt): BigInt {
    let result = super.call(
      "requestWithdraw",
      "requestWithdraw(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );

    return result[0].toBigInt();
  }

  try_requestWithdraw(_amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestWithdraw",
      "requestWithdraw(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requestWithdrawAmountPerEpoch(param0: BigInt): BigInt {
    let result = super.call(
      "requestWithdrawAmountPerEpoch",
      "requestWithdrawAmountPerEpoch(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_requestWithdrawAmountPerEpoch(
    param0: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestWithdrawAmountPerEpoch",
      "requestWithdrawAmountPerEpoch(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeOracle(): Address {
    let result = super.call("stakeOracle", "stakeOracle():(address)", []);

    return result[0].toAddress();
  }

  try_stakeOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakeOracle", "stakeOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  submitThreshold(): BigInt {
    let result = super.call(
      "submitThreshold",
      "submitThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_submitThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "submitThreshold",
      "submitThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalBuffered(): BigInt {
    let result = super.call("totalBuffered", "totalBuffered():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBuffered(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBuffered",
      "totalBuffered():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DelegateCall extends ethereum.Call {
  get inputs(): DelegateCall__Inputs {
    return new DelegateCall__Inputs(this);
  }

  get outputs(): DelegateCall__Outputs {
    return new DelegateCall__Outputs(this);
  }
}

export class DelegateCall__Inputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }
}

export class DelegateCall__Outputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _agent(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stakeOracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _okcLst(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RequestWithdrawCall extends ethereum.Call {
  get inputs(): RequestWithdrawCall__Inputs {
    return new RequestWithdrawCall__Inputs(this);
  }

  get outputs(): RequestWithdrawCall__Outputs {
    return new RequestWithdrawCall__Outputs(this);
  }
}

export class RequestWithdrawCall__Inputs {
  _call: RequestWithdrawCall;

  constructor(call: RequestWithdrawCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RequestWithdrawCall__Outputs {
  _call: RequestWithdrawCall;

  constructor(call: RequestWithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ResetDelegateCacheCall extends ethereum.Call {
  get inputs(): ResetDelegateCacheCall__Inputs {
    return new ResetDelegateCacheCall__Inputs(this);
  }

  get outputs(): ResetDelegateCacheCall__Outputs {
    return new ResetDelegateCacheCall__Outputs(this);
  }
}

export class ResetDelegateCacheCall__Inputs {
  _call: ResetDelegateCacheCall;

  constructor(call: ResetDelegateCacheCall) {
    this._call = call;
  }
}

export class ResetDelegateCacheCall__Outputs {
  _call: ResetDelegateCacheCall;

  constructor(call: ResetDelegateCacheCall) {
    this._call = call;
  }
}

export class ResetEpochStatusCall extends ethereum.Call {
  get inputs(): ResetEpochStatusCall__Inputs {
    return new ResetEpochStatusCall__Inputs(this);
  }

  get outputs(): ResetEpochStatusCall__Outputs {
    return new ResetEpochStatusCall__Outputs(this);
  }
}

export class ResetEpochStatusCall__Inputs {
  _call: ResetEpochStatusCall;

  constructor(call: ResetEpochStatusCall) {
    this._call = call;
  }
}

export class ResetEpochStatusCall__Outputs {
  _call: ResetEpochStatusCall;

  constructor(call: ResetEpochStatusCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetAgentAddressCall extends ethereum.Call {
  get inputs(): SetAgentAddressCall__Inputs {
    return new SetAgentAddressCall__Inputs(this);
  }

  get outputs(): SetAgentAddressCall__Outputs {
    return new SetAgentAddressCall__Outputs(this);
  }
}

export class SetAgentAddressCall__Inputs {
  _call: SetAgentAddressCall;

  constructor(call: SetAgentAddressCall) {
    this._call = call;
  }

  get _agent(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAgentAddressCall__Outputs {
  _call: SetAgentAddressCall;

  constructor(call: SetAgentAddressCall) {
    this._call = call;
  }
}

export class SetEpochStatusCall extends ethereum.Call {
  get inputs(): SetEpochStatusCall__Inputs {
    return new SetEpochStatusCall__Inputs(this);
  }

  get outputs(): SetEpochStatusCall__Outputs {
    return new SetEpochStatusCall__Outputs(this);
  }
}

export class SetEpochStatusCall__Inputs {
  _call: SetEpochStatusCall;

  constructor(call: SetEpochStatusCall) {
    this._call = call;
  }
}

export class SetEpochStatusCall__Outputs {
  _call: SetEpochStatusCall;

  constructor(call: SetEpochStatusCall) {
    this._call = call;
  }
}

export class SetOKCLstCall extends ethereum.Call {
  get inputs(): SetOKCLstCall__Inputs {
    return new SetOKCLstCall__Inputs(this);
  }

  get outputs(): SetOKCLstCall__Outputs {
    return new SetOKCLstCall__Outputs(this);
  }
}

export class SetOKCLstCall__Inputs {
  _call: SetOKCLstCall;

  constructor(call: SetOKCLstCall) {
    this._call = call;
  }

  get _OKCLst(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOKCLstCall__Outputs {
  _call: SetOKCLstCall;

  constructor(call: SetOKCLstCall) {
    this._call = call;
  }
}

export class SetPauserCall extends ethereum.Call {
  get inputs(): SetPauserCall__Inputs {
    return new SetPauserCall__Inputs(this);
  }

  get outputs(): SetPauserCall__Outputs {
    return new SetPauserCall__Outputs(this);
  }
}

export class SetPauserCall__Inputs {
  _call: SetPauserCall;

  constructor(call: SetPauserCall) {
    this._call = call;
  }

  get _newPauser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPauserCall__Outputs {
  _call: SetPauserCall;

  constructor(call: SetPauserCall) {
    this._call = call;
  }
}

export class SetStakeOracleAddressCall extends ethereum.Call {
  get inputs(): SetStakeOracleAddressCall__Inputs {
    return new SetStakeOracleAddressCall__Inputs(this);
  }

  get outputs(): SetStakeOracleAddressCall__Outputs {
    return new SetStakeOracleAddressCall__Outputs(this);
  }
}

export class SetStakeOracleAddressCall__Inputs {
  _call: SetStakeOracleAddressCall;

  constructor(call: SetStakeOracleAddressCall) {
    this._call = call;
  }

  get _stakeOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStakeOracleAddressCall__Outputs {
  _call: SetStakeOracleAddressCall;

  constructor(call: SetStakeOracleAddressCall) {
    this._call = call;
  }
}

export class SetSubmitThresholdCall extends ethereum.Call {
  get inputs(): SetSubmitThresholdCall__Inputs {
    return new SetSubmitThresholdCall__Inputs(this);
  }

  get outputs(): SetSubmitThresholdCall__Outputs {
    return new SetSubmitThresholdCall__Outputs(this);
  }
}

export class SetSubmitThresholdCall__Inputs {
  _call: SetSubmitThresholdCall;

  constructor(call: SetSubmitThresholdCall) {
    this._call = call;
  }

  get _submitThreshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSubmitThresholdCall__Outputs {
  _call: SetSubmitThresholdCall;

  constructor(call: SetSubmitThresholdCall) {
    this._call = call;
  }
}

export class SetVersionCall extends ethereum.Call {
  get inputs(): SetVersionCall__Inputs {
    return new SetVersionCall__Inputs(this);
  }

  get outputs(): SetVersionCall__Outputs {
    return new SetVersionCall__Outputs(this);
  }
}

export class SetVersionCall__Inputs {
  _call: SetVersionCall;

  constructor(call: SetVersionCall) {
    this._call = call;
  }

  get _version(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetVersionCall__Outputs {
  _call: SetVersionCall;

  constructor(call: SetVersionCall) {
    this._call = call;
  }
}

export class SubmitCall extends ethereum.Call {
  get inputs(): SubmitCall__Inputs {
    return new SubmitCall__Inputs(this);
  }

  get outputs(): SubmitCall__Outputs {
    return new SubmitCall__Outputs(this);
  }
}

export class SubmitCall__Inputs {
  _call: SubmitCall;

  constructor(call: SubmitCall) {
    this._call = call;
  }
}

export class SubmitCall__Outputs {
  _call: SubmitCall;

  constructor(call: SubmitCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TogglePauseCall extends ethereum.Call {
  get inputs(): TogglePauseCall__Inputs {
    return new TogglePauseCall__Inputs(this);
  }

  get outputs(): TogglePauseCall__Outputs {
    return new TogglePauseCall__Outputs(this);
  }
}

export class TogglePauseCall__Inputs {
  _call: TogglePauseCall;

  constructor(call: TogglePauseCall) {
    this._call = call;
  }
}

export class TogglePauseCall__Outputs {
  _call: TogglePauseCall;

  constructor(call: TogglePauseCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
