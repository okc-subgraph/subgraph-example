// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Submit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Submit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Submit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Submit", id.toString(), this);
  }

  static load(id: string): Submit | null {
    return store.get("Submit", id) as Submit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }
}

export class Block extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Block entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Block entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Block", id.toString(), this);
  }

  static load(id: string): Block | null {
    return store.get("Block", id) as Block | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get parentHash(): Bytes {
    let value = this.get("parentHash");
    return value.toBytes();
  }

  set parentHash(value: Bytes) {
    this.set("parentHash", Value.fromBytes(value));
  }

  get unclesHash(): Bytes {
    let value = this.get("unclesHash");
    return value.toBytes();
  }

  set unclesHash(value: Bytes) {
    this.set("unclesHash", Value.fromBytes(value));
  }

  get author(): Bytes {
    let value = this.get("author");
    return value.toBytes();
  }

  set author(value: Bytes) {
    this.set("author", Value.fromBytes(value));
  }

  get stateRoot(): Bytes {
    let value = this.get("stateRoot");
    return value.toBytes();
  }

  set stateRoot(value: Bytes) {
    this.set("stateRoot", Value.fromBytes(value));
  }

  get transactionsRoot(): Bytes {
    let value = this.get("transactionsRoot");
    return value.toBytes();
  }

  set transactionsRoot(value: Bytes) {
    this.set("transactionsRoot", Value.fromBytes(value));
  }

  get receiptsRoot(): Bytes {
    let value = this.get("receiptsRoot");
    return value.toBytes();
  }

  set receiptsRoot(value: Bytes) {
    this.set("receiptsRoot", Value.fromBytes(value));
  }

  get number(): BigInt {
    let value = this.get("number");
    return value.toBigInt();
  }

  set number(value: BigInt) {
    this.set("number", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get gasLimit(): BigInt {
    let value = this.get("gasLimit");
    return value.toBigInt();
  }

  set gasLimit(value: BigInt) {
    this.set("gasLimit", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get difficulty(): BigInt {
    let value = this.get("difficulty");
    return value.toBigInt();
  }

  set difficulty(value: BigInt) {
    this.set("difficulty", Value.fromBigInt(value));
  }

  get totalDifficulty(): BigInt {
    let value = this.get("totalDifficulty");
    return value.toBigInt();
  }

  set totalDifficulty(value: BigInt) {
    this.set("totalDifficulty", Value.fromBigInt(value));
  }

  get size(): BigInt | null {
    let value = this.get("size");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set size(value: BigInt | null) {
    if (value === null) {
      this.unset("size");
    } else {
      this.set("size", Value.fromBigInt(value as BigInt));
    }
  }
}
